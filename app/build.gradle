apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//统计task时间
apply plugin: "build-time-tracker"

def releaseTime() {
    return new Date().format("yyyy-MM-dd hh:mm:ss", TimeZone.getTimeZone("UTC"))
}

//自定义插件使用
if (canUsePlugin.toBoolean()) {
    apply plugin: "soli.plugin"
    //自定义插件数据获取
    pluginExt {
        param1 = "项目组件模块化调研。针对后面的项目以及考虑到相关项目的后续迭代，人员变动、项目维护上等多方面原因，项目开发的模块化组件化必须提上议程，了解目前主流的组件实施方案，各种方案的优缺点，针对实际情况，考虑目前秀动项目以及将来的项目用那种方案来做，要思考的问题如果把秀动项目改造成模块组件方式，成本和风险有多大，应该采用那种实现方式来做？？？？新项目，从开始是否就用这种方式来做？？？？等等，还有一系列的问题要解决"
        param2 = "什么 odsldk"
        nestExt {
            nestParams1 = "号的打开塑料袋 "
            nestParams2 = "dks"
            other {
                url = "www.baidu.com"
            }
        }
    }

    ClosureInput {
        user = "soli"
        pkg {
            repo = "www.facebook.com"
            userOrg = "maven"
            version {
                name = "facebook"
                desc = "闭包方式传入嵌套参数  一般都把一个参数写入到一个类中"
                released = releaseTime()
                vcsTag = "dsl"
            }
        }
    }
}


android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.soli.gradlestudy"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0-SNAPSHOT"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        多个module的时候，通过这个来避免资源冲突  但是就是每个资源id都要以这个开头
//        resourcePrefix "test_"

//        manifestPlaceholders 可以修改AndroidManifest.xml中格式为：${key}的内容
//        manifestPlaceholders = [app_icon : "@mipmap/ic_launcher"]
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

//        构建变体 > 构建类型[BuildType] > 产品风味[ProductFlavor] > 主源集[main] > 库依赖项
//        【新创建的源集】可以覆盖【main源集】的资源。
        typeOther.initWith(buildTypes.debug)
        typeOther {
            applicationIdSuffix ".typeOther"
            jniDebuggable = true
            versionNameSuffix ".other"
        }
    }

    applicationVariants.all { variant ->
        def mergedFlavor = variant.mergedFlavor
        mergedFlavor.manifestPlaceholders = [HostNme: "www.example.com/${variant.versionName}"]
        variant.outputs.all { output ->
            outputFileName = "Your_Apk_name_" + variant.name + "_" + variant.versionName + ".apk"
        }
    }

    packagingOptions {
        exclude "/testing-data/**"
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions 'two', 'one'

    productFlavors {
        demo {
            // Assigns this product flavor to the 'version' flavor dimension.
            dimension 'one'
        }

        full {
            dimension 'two'
        }

        minApi24 {
            // Assigns this flavor to the 'api' dimension.
            dimension 'one'
            minSdkVersion '24'
            versionNameSuffix "-minApi24"
        }

        minApi21 {
            dimension "one"
            minSdkVersion '21'
            versionNameSuffix "-minApi21"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    implementation 'androidx.core:core-ktx:+'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

}


buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered false
            threshold 50
            barstyle "unicode"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}

task World << {
    println "World"
}

task hello {
    doLast {
        println("Hello")
    }
}

apply from: rootProject.getRootDir().getAbsolutePath() + "/utils.gradle"
task intro(dependsOn: hello, description: "我是这个Task的描述信息") << {
    println "intro"
    println("Utls.gradle 的值-----${project.ext.getVersionNameAdvanced}")
}
