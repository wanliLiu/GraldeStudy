apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
//统计task时间
apply plugin: "build-time-tracker"
apply plugin: "soli.plugin"

buildscript {
    repositories {
        maven {
            url uri('../repo')
        }
    }
    dependencies {
        classpath "com.soli.plugin:myplugin:0.0.1"
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.soli.gradlestudy"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        resourcePrefix "test_"

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        def mergedFlavor = variant.mergedFlavor
        mergedFlavor.manifestPlaceholders = [HostNme: "www.example.com/${variant.versionName}"]
        variant.outputs.all { output ->
            outputFileName = "Your_Apk_name_" + variant.name + "_" + variant.versionName + ".apk"
        }
    }

    packagingOptions {
        exclude "/testing-data/**"
    }

    // Specifies the flavor dimensions you want to use. The order in which you
    // list each dimension determines its priority, from highest to lowest,
    // when Gradle merges variant sources and configurations. You must assign
    // each product flavor you configure to one of the flavor dimensions.
    flavorDimensions 'two', 'one'

    productFlavors {
        demo {
            // Assigns this product flavor to the 'version' flavor dimension.
            dimension 'one'
        }

        full {
            dimension 'two'
        }

        minApi24 {
            // Assigns this flavor to the 'api' dimension.
            dimension 'one'
            minSdkVersion '24'
            versionNameSuffix "-minApi24"
        }

        minApi21 {
            dimension "one"
            minSdkVersion '21'
            versionNameSuffix "-minApi21"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'

}


buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered false
            threshold 50
            barstyle "unicode"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}

task World << {
    println "World"
}

task hello {
    doLast {
        println("Hello")
    }
}

task intro(dependsOn: hello, description: "我是这个Task的描述信息") << {
    println "intro"
}

//统计每个任务执行的时间
class TimingsListener implements TaskExecutionListener, BuildListener {
    private long clock
    private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = System.currentTimeMillis()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = System.currentTimeMillis() - clock
        timings.add([ms, task.path])
        task.project.logger.warn "${task.path} took ${ms}ms"
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
//            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
//            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()
